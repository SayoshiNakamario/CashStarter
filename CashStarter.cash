pragma cashscript ^0.10.0;

contract CashStarter() {
  //////////////////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////    Pledge to a Campaign   ////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//  User pledges an amount of BCH to a campaignNFT on the CashStarter contract. Requires a 
//  userUTXO of atleast 12000 sats. The BCH is added to the campaignNFT and the user 
//  is given a receiptNFT that contains in its commitment:
//      1) how much BCH was pledged (bytes 0 to 5)
//      2) the campaignNFT's unique ID (bytes 35 to 39)
//
//  externalFunction() is used to pair a campaignNFT from this CashStarter contract with
//  another contract that performs additional logic on the campaignNFT. The other contracts
//  trust is verified in this contract by checking that the other contract is also providing a 
//  CashStarterNFT (categoryID) with minting capability. Those should never exist outside the 
//  CashStarter contract itself OR any trusted contract that was launched alongside CashStarter.
// ------------------------------------------------------------------------------------
//inputs: 
//  0   campaignNFT         [NFT]       (from CashStarter contract)
//  1   userUTXO            [BCH]       (from user)
//outputs:
//  0   campaignNFT         [NFT]       (to CashStarter contract)
//  1   refundNFT           [NFT]       (to user)
//  3   {optional} change   [BCH]       (to user)
//////////////////////////////////////////////////////////////////////////////////////////
//parameters:
//  pledgAmount: how much BCH (in satoshis) the user is pledging to the campaign. Minimum of 10000
//////////////////////////////////////////////////////////////////////////////////////////
    function pledge(int pledgeAmount) {
        require(this.activeInputIndex == 0);                                                // this contracts utxo must be input 0
        require(tx.inputs.length == 2);                                                     // exactly two inputs
        require(tx.outputs.length <= 3);                                                    // three or less outputs
        require(pledgeAmount >= 10000);                                                     // users pledgeAmount must be atleast 10000sats
        require(pledgeAmount <= 140737488355327);                                           // users pledgeAmount must be below max 6byte value (minus MSB in last byte due to minimal encoding)
        require(tx.inputs[0].tokenCategory == 0x64c9ea104e07d9099bc3cdcb2a0035286773790c40dbcb0ae67068b1b8453748 + 0x02); // input0 must be active campaignNFT
        require(tx.inputs[1].value >= 12000);                                               // userUTXO must be a minimum of 12000sats to cover pledge + campaignNFT + miner fee
        require(tx.inputs[1].tokenCategory == 0x);                                          // userUTXO must not have tokens

        require(tx.outputs[1].lockingBytecode == tx.inputs[1].lockingBytecode);             // refundNFT to users address       
        require(tx.outputs[1].tokenAmount == 0);                                            // no tokens
        require(tx.outputs[1].value == 1000);                                               // dust satoshis to exist        
        require(tx.outputs[1].tokenCategory == tx.inputs[0].tokenCategory.split(32)[0]);    // immutable of campaignNFT                         

        bytes4 pledgeID, bytes5 campaignID = tx.inputs[0].nftCommitment.split(31)[1].split(4);  //get pledgeID and campaignID
        require(campaignID != 0xFFFFFFFFFF);                                                // verify ID is not the masterNFT //shouldnt ever be triggered, max campaignID for 5bytes field is 549,755,813,887
        int newPledgeID = int(pledgeID) + 1;                                                // add one to the pledgeID
        require(newPledgeID != 2147483647);                                                 // verify the new pledgeID is not above max 4byte value (minus MSB in last byte due to minimal encoding)
        bytes4 endBlock = tx.inputs[0].nftCommitment.split(26)[1].split(4)[0];              // get campaigns endBlock
        require(tx.outputs[1].nftCommitment == bytes6(pledgeAmount) + bytes21(0) + endBlock + bytes4(newPledgeID) + campaignID); // create refundNFT commitment

        bytes restCommitment = tx.inputs[0].nftCommitment.split(31)[0];                     // get campaigns commitment
        require(tx.outputs[0].nftCommitment == restCommitment + bytes4(newPledgeID) + campaignID); // carry forward campaignNFT commitment
        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);             // recreate campaignNFT        
        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);                 // carry forward campaignNFT tokenCategory + capability           
        require(tx.outputs[0].value == tx.inputs[0].value + pledgeAmount);                  // add pledgeAmount to existing campaignNFT satoshis          
        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount);                     // carry forward campaignNFT tokenAmount                

        if (tx.outputs.length == 3) {                                                       // {optional} change output
            require(tx.outputs[2].lockingBytecode == tx.inputs[1].lockingBytecode);         // change goes to users address     
            require(tx.outputs[2].tokenCategory == 0x);                                     // no tokens                 
        }
    }

    function externalFunction() {                                                           // interact with another contract
        require(this.activeInputIndex == 1);                                                // the utxo from this CashStarter contract must be input1
        require(tx.inputs[0].tokenCategory == 0x64c9ea104e07d9099bc3cdcb2a0035286773790c40dbcb0ae67068b1b8453748 + 0x02);   // input0 from the other contract must be a CashStarterNFT with minting capability
    }
}
