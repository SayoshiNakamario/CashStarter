pragma cashscript ^0.10.0;

contract CashStarterClaim() {
  //////////////////////////////////////////////////////////////////////////////////////////
 /////////////////////////////////    Claim Camapaign   ///////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//  Creator claims campaign. Campaign must be past the fundTarget. 
//  ServiceProvider receives a fee (max 0.01 BCH)
// ___________________________________________________________________________________
//inputs: 
//  0   masterNFT           [NFT]           (from CashStarterClaim contract)
//  1   campaignNFT         [NFT]           (from CashStarter contract)
//  2   userUTXO            [BCH]           (from user)
//outputs:  
//  0   masterNFT           [NFT]           (to CashStarterClaim contract)                                                    
//  1   funds               [BCH]           (to user)
//  2   serviceFee          [BCH]           (to serviceProvider)
//////////////////////////////////////////////////////////////////////////////////////////
    function claim(bytes20 servicePKH, int serviceFee) {
        require(this.activeInputIndex == 0);                                                                              // this contracts utxo must be input 0
        require(tx.inputs.length == 3);                                                                                   // exactly three inputs   
        require(tx.outputs.length == 3);                                                                                  // exactly three inputs
        require(tx.inputs[2].tokenCategory == 0x);                                                                        // userUTXO must not have tokens
        require(serviceFee <= tx.inputs[1].value * 50 / 1000);                                                            // serviceFee is capped at 5%

        require(tx.inputs[0].tokenCategory == 0x64c9ea104e07d9099bc3cdcb2a0035286773790c40dbcb0ae67068b1b8453748 + 0x02); // input0 must be masterNFT
        require(tx.inputs[0].nftCommitment.split(35)[1] == 0xFFFFFFFFFF);                                                 // input0 must be masterNFT ID

        bytes category, bytes capability = tx.inputs[1].tokenCategory.split(32);                                          // get input1 (campaignNFT) category and capability
        require (category == tx.inputs[0].tokenCategory.split(32)[0]);                                                    // campaignNFT must be a CashStarter tokenCategory
        require (capability != 0x);                                                                                       // campaignNFT must not be immutable (a pledgeNFT)

        require(tx.inputs[1].nftCommitment.split(35)[1] != 0xFFFFFFFFFF);                                                 // campaignNFT must not be masterNFT ID

        bytes campaignInfo = tx.inputs[1].nftCommitment.split(26)[0];                                                     // get campaignInfo from campaignNFT
        bytes6 fundTarget, bytes20 payoutAddress = campaignInfo.split(6);                                                 // get fundTarget and payoutAddress from campaignInfo
        require(tx.inputs[2].lockingBytecode == new LockingBytecodeP2PKH(payoutAddress));                                 // check userUTXO came from payoutAddress (verifies creator called claim)
        require(tx.inputs[1].value >= int(fundTarget));                                                                   // require campaignNFT has met/exceeded campaign goal

        require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);                                           // masterNFT recreated to CashStarterClaim contract               
        require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);                                               // same tokenCategory
        require(tx.outputs[0].value == tx.inputs[0].value);                                                               // same value
        require(tx.outputs[0].nftCommitment== tx.inputs[0].nftCommitment);                                                // same commitment
        require(tx.outputs[0].tokenAmount == tx.inputs[0].tokenAmount);                                                   // same tokenAmount

        require(tx.outputs[1].lockingBytecode == new LockingBytecodeP2PKH(payoutAddress));                                // campaign payout sent to creators address                
        require(tx.outputs[1].tokenCategory == 0x);                                                                       // no tokens
        require(tx.outputs[1].value == tx.inputs[1].value + tx.inputs[2].value - (serviceFee + 1000));                    // payout = campaignNFT sats + userUTXO sats - serviceFee and 1000sats for miner fee

        require(tx.outputs[2].lockingBytecode == new LockingBytecodeP2PKH(servicePKH));                                   // serviceProvider fee sent to provided address      
        require(tx.outputs[2].tokenCategory == 0x);                                                                       // no tokens
        require(tx.outputs[2].value == serviceFee);                                                                       // serviceFee
    }
}
